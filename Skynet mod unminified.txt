{
	"Mod": {
		"name": "Skynet mod",
		"author": "SlitheringHorror",
		"description": "Mon, 20 Apr 2020 15:33:49 GMT",
		"titleLeft": "Skynet ",
		"titleRight": "Mod!",
		"subtitleLeft": "Boosts bots' reaction times to be nigh-instanteneous",
		"subtitleRight": "and makes them lead targets"
	},
	"Matchmaking": {
		"MaxBots": 1
	},
	"World": {
		"BotName": "MurderBot"
	},
	"Choices": {
		"Keys": [
			{
				"btn": "a",
				"barSize": 0.75,
				"wheelSize": 0.5
			},
			{
				"btn": "p",
				"barSize": 0.1,
				"wheelSize": 0.1
			},
			{
				"btn": "q",
				"barSize": 1,
				"wheelSize": 1
			},
			{
				"btn": "w",
				"barSize": 1,
				"wheelSize": 0.75
			},
			{
				"btn": "e",
				"barSize": 1,
				"wheelSize": 0.75
			},
			{
				"btn": "r",
				"barSize": 1,
				"wheelSize": 0.75
			},
			null,
			{
				"btn": "f",
				"barSize": 0.75,
				"wheelSize": 0.5
			}
		],
		"Options": {
			"p": [
				[
					"point"
				]
			]
		}
	},
	"Spells": {
		"point": {
			"id": "point",
			"name": "Point",
			"description": "For testing. Mark a point in space. No effect. Flies like a very fast horcrux.",
			"action": "projectile",
			"sound": "horcrux",
			"color": "#22ee88",
			"icon": "cometSpark",
			"maxAngleDiffInRevs": 0.01,
			"cooldown": 1,
			"throttle": true,
			"projectile": {
				"density": 0.000001,
				"restitution": 0,
				"radius": 0.0035,
				"speed": 1,
				"maxTicks": 30,
				"minTicks": 1,
				"damage": 0,
				"lifeSteal": 0,
				"collideWith": 29,
				"expireOn": 5,
				"destructible": {},
				"conveyable": false,
				"bumpable": false,
				"shieldTakesOwnership": false,
				"projectileBuffs": [],
				"renderers": [
					{
						"type": "projectile",
						"ticks": 10,
						"noPartialRadius": true
					}
				],
				"behaviours": [
					{
						"type": "homing",
						"targetType": "cursor",
						"trigger": {
							"afterTicks": 60,
							"atCursor": true
						},
						"newSpeed": 0,
						"redirect": true
					}
				],
				"sound": "horcrux",
				"color": "#22ee88"
			}
		}
	},
	"Code": "var center = { x: 0.5, y: 0.5 };

var CloseEnoughDistance = 0.05;
var CloseEnoughRadians = 0.03 * Math.PI;
var MissRadius = 0;
var DodgeRadius = 0.15;
var SpellCastIntervalMilliseconds = 500;
var SpellCastJitterMilliseconds = 300;

var TicksPerSecond = 60;

var HardReactionMilliseconds = 1;
var EasyReactionMilliseconds = 1;
var ReactionMillisecondsLookup = { // Change the reaction time on certain spells
    retarget: 1,
};

var alreadyChosenSpells = false;
var nextSpell = 0;

// See ai.contracts.ts:
// input is InputContract - contains information about the current state of the world
// output is OutputContract - an action you want to take in response to the world 

//parameters for the bot
var enableTargetLeading = true;
var RepeaterCastIntervalMilliseconds = 50;
var enableObstacleRaytracing = false;//not implemented
var positionTrackingTicks = 120; //how many to track, including the current one. At least 2.
var intersectionOptimizationSteps = 5; //from aim: how many times to refine the guess for the intersection point.
var movementLocationChangeTicks = 30; //from move: how often to update the location to move to
const PREDICT_TESTING = false; //if true, BOTS WILL NOT FIGHT and only show their targeting
var minDodgeDistance = 0.03; //The bot will dodge projectiles it expects to pass within this distance of its current position. acolyte radius is 0.0125
var minDodgeTime = 0.75; //The bot won't dodge projectiles which have more than that long to fly until closest approach.
var maxDeflectTime = 0.15;//The bot will deflect projectiles which are that long away from hitting them.
var DEBUG_NO_MOVE = false;//disables `move`
//memory vars
var trackedPositions = {}; //dictionary of arrays(of length up to positionTrackingTicks) of positions
var lastMoveTick = -1000;
var lastMovePosition = undefined;

function aim(target, spell, caster) {
  const DEBUG_AIM = false;
  // Gets target, spell, and caster, outputs the position for caster to aim at to hit the target with the spell.
  if(!enableTargetLeading){
    return target.pos;
  }
  const AIM_EXCLUDED_SPELLS = ['dualSaber','halo','mines'];
  if(AIM_EXCLUDED_SPELLS.indexOf(spell.id)>=0){//if in list
    return target.pos;
  }
  /*old tracking code
  const HEROSPEED = 0.12 //not sure I can get it directly
  
  var curPos = target.pos; //vector
  var targetForcedVelocity = target.velocity; //vector - this is only enforced velocity from knockback
  var targetMoveVelocity = vectorMultiply(vectorFromAngle(target.heading),HEROSPEED);
  var targetVelocity = vectorPlus(targetForcedVelocity,targetMoveVelocity);
  var range = vectorDistance(caster.pos, curPos);
  var time1 = range/spell.projectile.speed; // naive guess at a time-to-hit, in seconds
  var deltaX = vectorMultiply(targetVelocity,time1); //leading distance
  */
  
  //new code: prediction based on old positions
  //the current position should already be in trackedPositions
  var curPos = target.pos;
  var tracker = trackedPositions[target.id];
  !DEBUG_AIM || console.log(tracker);
  if(tracker === undefined||tracker.length <= 1){
    return curPos;//TODO: better handling cases when the target has no tracked poses for some reason.
  }
  /*//most naive way: velocity = (<newest pos>-<oldest pos>)/(positionTrackingTicks-1)
  var estimatedVelocity = vectorMultiply(vectorDiff(tracker[tracker.length-1],tracker[0]),1/(positionTrackingTicks-1));//this is speed per tick*/
  //less naive way: linear approximation
  var estimatedVelocity = linearApproximation(tracker);
  //console.log(\"estimatedVelocity:\"+myVectorToString(estimatedVelocity));
  var range = vectorDistance(caster.pos, curPos);
  var time1 = range/spell.projectile.speed; // first naive guess, in seconds
  if(spell.chargeTicks>0){time1+=spell.chargeTicks/TicksPerSecond;}//for spells like repulsor
  var deltaX = vectorMultiply(estimatedVelocity,time1*TicksPerSecond);//converting from per tick to per second
  var aimPos = vectorPlus(curPos, deltaX);
  for(let i=1;i<intersectionOptimizationSteps;i++){
    //intersection refinement
    //console.log(\"i=\"+i+\";time1=\"+time1);
    var range = vectorDistance(caster.pos, aimPos);//to the aiming position this time
    var time1 = range/spell.projectile.speed; // refined guess of the time
    if(spell.chargeTicks>0){time1+=spell.chargeTicks/TicksPerSecond;}//for spells like repulsor
    var deltaX = vectorMultiply(estimatedVelocity,time1*TicksPerSecond);//converting from per tick to per second
    var aimPos = vectorPlus(curPos, deltaX);
  }
  !DEBUG_AIM || console.log(\"spellSpeed:\"+spell.projectile.speed+\";estimatedVelocity:\"+myVectorToString(estimatedVelocity));
  return aimPos;
}
function linearApproximation(posArray){
  //gets an array of vectors, assumed to be all with a separation of 1 tick, outputs incline of least-squares approximation
  let valNum = posArray.length;
  let X = [];
  let Y = [];
  for(let i=0;i<valNum;i++){
    X.push(posArray[i].x);
    Y.push(posArray[i].y);
  }
  let T = myRange(0,valNum);
  let aX = ODLR(T,X).a;
  let aY = ODLR(T,Y).a;
  return {x:aX,y:aY};//b we don't care about
}
function ODLR(X,Y){
  //one-dimensional linear regression
  //outputs parameters of approximation `ax+b` of points in the input
  //X,Y - arrays of numbers, same length
  let n = X.length;
  let XY = myArrayMultiply(X,Y);
  let XX = myArrayMultiply(X,X);
  let YY = myArrayMultiply(Y,Y);
  let XSum=0,YSum=0,XXSum=0,XYSum=0,YYSum=0;
  for(let i=0;i<n;i++){
    XSum+=X[i];YSum+=Y[i];XXSum+=XX[i];XYSum+=XY[i];YYSum+=YY[i];
  }
  let a = (n*XYSum-XSum*YSum)/(n*XXSum-XSum*XSum);
  let b = (XSum*XYSum-XXSum*YSum)/(XSum*XSum-n*XXSum);
  return {a:a,b:b};//I sure hope I didn't make a mistake here, lol
}
function myRange(a,b){
  //like in python - array from a inclusive to b exclusive
  let res = [];
  for(let i = a; i < b; i++){
    res.push(i);
  }
  return res;
}
function myArrayMultiply(a,b){
  //array elementwise multiplication
  //can work on 2-vec
  if(a.length!=b.length||typeof a != typeof b){
    console.log(\"Trying to multiply arrays of different sizes/types\");
    return undefined;//TODO: error out in a better way.
  }
  let res = [];
  if(a.length>0 && a[0].x!==undefined){
  //assume vector arrays
  for(let i = 0; i<a.length;i++){
      res.push({x:a[i].x*b[i].x,y:a[i].y*b[i].y});
    }
  }
  else{
    for(let i = 0; i<a.length;i++){
      res.push(a[i]*b[i]);
    }
  }
  return res;
}
function myArraySum(a){
  if(a.length==0){return 0;}
  //sums arrays, including vector ones
  if(a[0].x!==undefined){
    //assuming vector array
    let sumX=0;
    let sumY=0;
    for(let i=0;i<a.length;i++){
      sumX+=a[i].x;
      sumY+=a[i].y;
    }
    return {x:sumX,y:sumY};
  }
  else{
    let sum=0
    for(let i=0;i<a.length;i++){
      sum+=a[i];
    }
    return sum;
  }
}
function myVectorToString(vector){
  return \"(x:\"+vector.x+\";y:\"+vector.y+\")\"
}
function doesLineIntersectObstacles(pos1, pos2, obstacles, lookup){
  //lookup is ObstacleTemplateLookup
  for (var obstacle in obstacles) {
    var C = obstacle.pos;
    var closest = findClosestDistanceToPoint(pos, pos2, C);
    var obstacleTemplate = lookup[obstacle.type];
    //if(closest<) 
    //oh, I can't get an obstacle's radius...
    return false;
  }
}

function findClosestDistanceToPoint(pos1, pos2, otherPos){
  //return closest distance to otherPos among points on the line segment from pos1 to pos2.
  var AB = vectorDiff(pos2, pos1);
  var AC = vectorDiff(otherPos, pos1);
  var BC = vectorDiff(otherPos, pos2);
  var AB_BC = vectorDot(AB,BC);
  var AB_AC = vectorDot(AB,AC);
  var result = 0;
  if (AB_BC > 0){
    //then it's BC
    result = vectorLength(BC);
  }
  else if (AB_AC < 0) { 
    //then it's AC
    result = vectorLength(AC);
  }
  else {
    var div = vectorLength(AB);
    result = ((AB.x*AC.y) - (AB.y*AC.x))/div;
    if(result < 0){
      result *= -1;
    }
  }
  return result;
}
function updateTracking(worldstate){
  const DEBUG_TRACKING = false;
  !DEBUG_TRACKING || console.log(\"Updating tracking!\");
  //called from act() every tick, updates tracking
  for (var herokey in worldstate.heroes){//iterates over keys
    var hero = worldstate.heroes[herokey];
    !DEBUG_TRACKING || console.log(\"Tracking hero of id:\"+hero.id);
    if(trackedPositions[hero.id]===undefined){
      //haven't been tracked before
      trackedPositions[hero.id]=[];
    }
    if(trackedPositions[hero.id].length>0){
      //teleport detection
      const MAX_MOVE_PER_TICK = 0.04//normal movement speed is 0.12 per second = 0.002 per tick, that's 20 times that
      if(vectorLength(vectorDiff(hero.pos,trackedPositions[hero.id][trackedPositions[hero.id].length-1]))>MAX_MOVE_PER_TICK){
        trackedPositions[hero.id]=[];//drop past tracking for this hero
        console.log(\"Hero(id:\"+hero.id+\") moved too fast, discarding tracked positions.\")
      }
    }
    trackedPositions[hero.id].push(hero.pos); //add new position to the end
    while(trackedPositions[hero.id].length > positionTrackingTicks){
      trackedPositions[hero.id].shift(); //remove first element(oldest pos)
    }
    !(worldstate.tick%60==0 && !hero.isBot)|| console.log(FFT(getXValues(trackedPositions[hero.id])));
  }
}
function getXValues(arr){
  //returns an array of arr[i].x
  let res = [];
  for(b in arr){
    res.push(arr[b].x);
  }
  return res;
}
function evadeOverload(worldstate, hero, cooldowns, settings){
  const DEBUG_EVADE_OVERLOAD = false;
  let overloadRange = settings.Spells['scourge'].detonate.radius;
  //!DEBUG_EVADE_OVERLOAD || console.log(\"overload range:\"+overloadRange);
  // Check if there are players looking to overload you
  for (key in worldstate.heroes){
    let enemy = worldstate.heroes[key];
    if(enemy.id == hero.id||vectorDistance(enemy.pos,hero.pos)<(overloadRange+hero.radius)){
      continue;//ourselves or too far
    }
    if(enemy.casting && enemy.casting.spellId == \"scourge\"){
      //uh-oh, need to evade right now
      for(spellId in cooldowns){
        var meteorSpells = [\"meteorite\",\"meteor\"];
        if(meteorSpells.indexOf(spellId)>=0 && cooldowns[spellId] === 0){
          //someone is about to have a bad time...
          !DEBUG_EVADE_OVERLOAD || console.log(\"Knockbacking overloader!\");
          return {spellId: spellId, target:enemy.pos};
        }
      }
      var evadeDirection = vectorUnit(vectorDiff(hero.pos, enemy.pos));
      var step = vectorMultiply(evadeDirection, 2*overloadRange);//the range shouldn't matter much, to be honest
      var target = vectorPlus(hero.pos, step);
      !DEBUG_EVADE_OVERLOAD || console.log(\"Evading overload!\");
      return { spellId: \"move\", target }; 
    }
  }
  return null;
}

function act(input) {
    // Want the bot to do nothing? Uncomment the line below (remove the //):
    // return null;

    var state = input.state;
    var heroId = input.heroId;
    var hero = state.heroes[heroId];
    var cooldowns = input.cooldowns;
    var settings = input.settings;
    var difficulty = input.difficulty;
    
    var opponent = findOpponent(state.heroes, heroId);
    if (!(hero && opponent)) {
        // Either we're dead, or everyone else is, nothing to do
        return null;
    }
    updateTracking(state);
    var action = null;
    if (state.started) {
        action =
            evadeOverload(state, hero, cooldowns, settings)
            ||recovery(state, hero, cooldowns)
            || dodge(state, hero, cooldowns, settings)
            || castSpell(state, hero, opponent, cooldowns, settings)
            || focus(hero, opponent)
            || chase(state, hero, cooldowns, opponent)
            || move(state, hero)
            || face(state, hero, opponent)
    } else {
        action =
            chooseSpells(settings)
            || dodge(state, hero, cooldowns, settings)
            || move(state, hero)
            || face(state, hero, opponent)
    }

    if (action) {
        // Give the bot a reaction time otherwise it is OP
        var reactionMilliseconds = ReactionMillisecondsLookup[action.spellId] || defaultReactionMilliseconds(difficulty);
        action.delayMilliseconds = reactionMilliseconds;
        //console.log(action);  
        return action;
    } else {
        return null;
    }
}

function defaultReactionMilliseconds(difficulty) {
    var alpha = Math.sqrt(difficulty);
    return alpha * HardReactionMilliseconds + (1 - alpha) * EasyReactionMilliseconds;
}

function chooseSpells(settings) {
    if (alreadyChosenSpells) {
        return null;
    }
    alreadyChosenSpells = true;

    var spells = randomSpells(settings);
  
    // Want to test a particular spell? Uncomment and edit the lines below
    /*spells[\"q\"] = \"fireball\";
    spells[\"w\"] = \"lightning\";
    spells[\"e\"] = \"forcefield\";
    spells[\"r\"] = \"repeater\";*/
    spells[\"q\"] = \"fireball\";
    spells[\"w\"] = \"boost\";
    spells[\"e\"] = \"meteorite\";
    spells[\"r\"] = \"repeater\";

    spells[\"p\"] = \"point\";//used to point at targets
    return { spells };
}

function randomSpells(settings) {
\tvar keyBindings = {};
\tvar allOptions = settings.Choices.Options;
\tfor (var btn in allOptions) { // One of the buttons, e.g. Q or R
        var options = allOptions[btn];

        var spellIds = [];
        for (var i = 0; i < options.length; ++i) {
            var row = options[i];
            for (var j = 0; j < row.length; ++j) {
                var spellId = row[j];
                spellIds.push(spellId);
            }
        }

\t\tif (spellIds.length > 1) {
\t\t\tkeyBindings[btn] = spellIds[Math.floor(Math.random() * spellIds.length)];
\t\t}
\t}
\treturn keyBindings;
}

function findOpponent(heroes, myHeroId) {
    var myHero = heroes[myHeroId];
    if (!myHero) {
        return null;
    }

    var choice = null;
    var closestDist = 1000;
    for (var heroId in heroes) {
        var hero = heroes[heroId];

        if (!hero.isEnemy) { continue; }

        // Uncomment the line below to only target humans
        if (hero.isBot) { continue; }
        let dist = vectorDistance(hero.pos,myHero.pos);
        if (dist < closestDist) {
            // Target the closest enemy instead - SH
            closestDist = dist;
            choice = hero;
        }
    }
    return choice;
}

function recovery(state, hero, cooldowns) {
    if (hero.inside || state.radius <= 0) {
        // No need to recover
        return null;
    }

    var spellId = null;
    if (cooldowns[\"teleport\"] === 0) {
        spellId = \"teleport\";
    } else if (cooldowns[\"thrust\"] === 0) {
        spellId = \"thrust\";
    } else if (cooldowns[\"swap\"] === 0) {
        spellId = \"swap\";
    } else if (cooldowns[\"voidRush\"] === 0) {
        spellId = \"voidRush\";
    } else if (cooldowns[\"vanish\"] === 0) {
        spellId = \"vanish\";
    } else {
        spellId = \"move\";
    }

    if (spellId) {
        return { spellId, target: center };
    }
    return null;
}

function deflect(state, hero, cooldowns, projectile) {
    var deflectExcludedProjectiles = [\"boomerang\"];//don't try to deflect annoying spells
    if(deflectExcludedProjectiles.indexOf(projectile.spellId)>=0){
     return null;
    }
    var target = vectorMidpoint(hero.pos, projectile.pos);
    var spellId = null;
    if (cooldowns[\"shield\"] === 0) {
        spellId = \"shield\";
    } else if (cooldowns[\"icewall\"] === 0) {
        spellId = \"icewall\";
    } else if (cooldowns[\"saber\"] === 0) {
        spellId = \"saber\";
    } else if (cooldowns[\"dualSaber\"] === 0) {
        spellId = \"dualSaber\";
    } else if (cooldowns[\"meteor\"] === 0) {
        spellId = \"meteor\";
    } else if (cooldowns[\"meteorite\"] === 0) {
        spellId = \"meteorite\";
    } else if (cooldowns[\"whirlwind\"] === 0) {
        spellId = \"whirlwind\";
    } else if (cooldowns[\"phaseOut\"] === 0) {
        spellId = \"phaseOut\";
    } else {
        spellId = null;
    }

    if (spellId) {
        return { spellId, target };
    } else {
        return null;
    }
}

function castSpell(state, hero, opponent, cooldowns, settings) {
    if (!readyForNextSpell(hero)) {
        return null;
    }

    var candidates = [];
    for (var spellId in cooldowns) {
        if(spellId==\"point\"){
          continue;//not allowed to use it normally
        }
        var readyToCast = !cooldowns[spellId];
        var spell = settings.Spells[spellId];

        if (spell && readyToCast && validAttack(state, hero, opponent, spell)) {
            if([\"meteorite\",\"meteor\"].indexOf(spellId) >= 0/* && Math.random() < 0.95*/){
              continue;//try to not waste those on normal attacks
            }
          candidates.push(spellId);
        }
    }

    if (candidates.length > 0) {
        var spellId = candidates[Math.floor(Math.random() * candidates.length)];
        var action = { spellId, target: aim(opponent, settings.Spells[spellId], hero) };
        if (action.spellId === spellId) {
            updateNextSpellTime(spellId);
        }
        if(PREDICT_TESTING){
          action.spellId = \"point\";
        }
        return action;
    } else {
        return null;
    }
}

function validAttack(state, hero, opponent, spell) {
    var opponentShielded = !!opponent.shieldTicksRemaining;

    var distance = vectorDistance(hero.pos, opponent.pos);
    if (spell.action === \"projectile\" || spell.action === \"spray\" || spell.action === \"retractor\" || spell.action === \"focus\" || spell.action === \"charge\") {
        if (spell.id === \"swap\") { // Swap doesn't work as an attack
            return false;
        }
        if (opponentShielded && !spell.projectile.detonate) { // Detonate spells can penetrate shields, nothing else can
            return false;
        }
        if (spell.id === \"whip\") {
            // Just keep casting Electroshock even if out of range
            return true;
        }

        var range = spell.projectile.speed * spell.projectile.maxTicks / TicksPerSecond + opponent.radius;
        return distance <= range;
    } else if (spell.action === \"scourge\") {
        var range = spell.radius + opponent.radius;
        return distance <= range;
    } else if (spell.id === \"blaze\") {
        return true;
    } else {
        return false;
    }
}

function readyForNextSpell(hero) {
    return (
        Date.now() >= nextSpell // Don't cast too fast
        || !!hero.link // If linked to something, cast as many spells as possible
    );
}

function updateNextSpellTime(spellId) {
    if(spellId == \"repeater\"){
      //console.log(\"repeater usage detected\")
      nextSpell = Date.now() + RepeaterCastIntervalMilliseconds;
      return;
    }
    nextSpell = Date.now() + SpellCastIntervalMilliseconds + Math.floor((Math.random() < 0.5 ? -1 : 1) * Math.random() * SpellCastJitterMilliseconds);
}

function jitter(target, missRadius) {
    var radius = Math.random() * missRadius;
    var angle = Math.random() * 2 * Math.PI;
    return {
        x: target.x + radius * Math.cos(angle),
        y: target.y + radius * Math.sin(angle),
    };
}

function focus(hero, opponent) { // When using a spell (e.g. Acolyte Beam, Spirit Missile) - ensure we are focusing the enemy, otherwise we will miss
    if (hero.casting) {
        if (hero.casting.spellId === \"blast\" || hero.casting.spellId === \"retractor\" || hero.casting.spellId === \"rocket\") {
            // Have to release or it won't fire
            return { spellId: hero.casting.spellId, release: true, target: opponent.pos };
        } else if (hero.casting.spellId === \"saber\" || hero.casting.spellId === \"dualSaber\") {
            // Don't focus the lightsaber, just swish it around
            return { spellId: \"retarget\", target: vectorPlus(hero.pos, vectorFromAngle(hero.heading + Math.PI / 2)) };
        } else if (hero.casting.spellId === \"grapple\") {
            // Throw away to the right (TODO: be smarter about this)
            return { spellId: hero.casting.spellId, release: true, target: vectorPlus(hero.pos, vectorFromAngle(hero.heading + Math.PI / 2)) };
        } else if (hero.casting.spellId === \"halo\") {
            return { spellId: \"move\", target: opponent.pos };
        } else {
            return { spellId: \"retarget\", target: opponent.pos };
        }
    } else {
        return null;
    }
}

function chase(state, hero, cooldowns, opponent) {
    if (\"whip\" in cooldowns) {
        // Got to get within range when using Electroshock
        var target = vectorMidpoint(hero.pos, opponent.pos);
        return { spellId: \"move\", target };
    } else {
        return null;
    }
}

function move(state, hero) {
    if(DEBUG_NO_MOVE){
      return null;
    }
    let curTick = state.tick;
    let target;
    if(curTick < lastMoveTick + movementLocationChangeTicks){
      target = lastMovePosition;
    }
    else{
      var centroid = { x: 0, y: 0 };
      var numOpponents = 0;
      for (var heroId in state.heroes) {
          if (heroId === hero.id) {
              continue; // Ignore self
          }
  
          var opponent = state.heroes[heroId];
          centroid.x += opponent.pos.x;
          centroid.y += opponent.pos.y;
  
          ++numOpponents;
      }
      centroid.x /= numOpponents;
      centroid.y /= numOpponents;
  
      if (!numOpponents) {
          return;
      }
  
      var offset = vectorNegate(vectorDiff(centroid, center)); // Move to the opposite side of the arena
      var targetDistance = state.radius * 0.33; // Closer to center than edge (for polygonal maps)
      
      //randomness! -SH
      offset = vectorFromAngle(vectorAngle(offset)+2*(Math.random()-0.5)*30*(2*Math.PI/360));
      targetDistance *= (0.8+0.4*Math.random());
      target = vectorPlus(center, vectorRelengthen(offset, targetDistance));
      lastMovePosition = target;
      lastMoveTick = curTick;
    }
    var distanceToTarget = vectorDistance(hero.pos, target);
    if (distanceToTarget <= 0.01) {
        // Close enough - don't send any action so the game can sleep while waiting for players
        return null;
    }

    return { spellId: \"move\", target };
}

function face(state, hero, opponent) {
    var target = opponent.pos;
    var targetAngle = vectorAngle(vectorDiff(opponent.pos, hero.pos));
    var angleDelta = vectorAngleDelta(hero.heading, targetAngle);
    if (Math.abs(angleDelta) <= CloseEnoughRadians) {
        return null;
    }

    return { spellId: \"retarget\", target };
}
function closestApproach(curPos,vel,origin){
  //calculates time and distance of closest approach of projectile to origin (only in future)
  let toProjectile = vectorDiff(curPos, origin);
  let radialVel = vectorDot(vel,vectorUnit(toProjectile));
  if(radialVel>=0){//going away
    return {time:0,dist:vectorLength(toProjectile),pos:curPos};
  }
  let normal = vectorUnit({x:vel.y,y:-vel.x});//normal vector to projectile's path
  if(vectorDot(normal,toProjectile)<0){//we'll take the normal pointing mostly from origin to projectile
    normal = vectorMultiply(normal,-1);
  }
  let distance = vectorDot(toProjectile,normal);//the component of radius-vector that's normal to velocity IS the closest approach
  
  let approachPos = vectorPlus(origin,vectorMultiply(normal,distance));
  let timeToApproach = vectorLength(vectorDiff(approachPos,curPos))/vectorLength(vel);//these vectors should be parallel, so just divide lengths
  return {time:timeToApproach,dist:distance,pos:approachPos};
}
function dodge(state, hero, cooldowns, settings) {
    var DEBUG_DODGE = false;
    var resultAction = null;
    var timeToAction = 100000; //the lower, the more urgent dodging this projectile is.
    for (var projectileId in state.projectiles) {
        var projectile = state.projectiles[projectileId];
        if (projectile.ownerId === hero.id) {
            // This is my own projectile
            continue;
        }

        if (projectile.spellId === \"halo\") {
            // Halo is never coming for us, it orbits around its owner
            continue;
        }
        
        let effectiveRadius = settings.Spells[projectile.spellId].projectile.detonate?(Math.max(projectile.radius,settings.Spells[projectile.spellId].projectile.detonate.radius)):(projectile.radius);
        let effectiveDodgeDistance = Math.max(minDodgeDistance, effectiveRadius + hero.radius + minDodgeDistance/2);
        if(settings.Spells[projectile.spellId].projectile.detonate){
          effectiveDodgeDistance += minDodgeDistance/2;//AoE spells need more care
        }
        !DEBUG_DODGE || !settings.Spells[projectile.spellId].projectile.detonate ||console.log(\"Projectile has AOE; using bigger effectiveDodgeDistance:\"+effectiveDodgeDistance);
        var diff = vectorDiff(hero.pos, projectile.pos);
        var distancePerTimeStep = vectorDot(projectile.velocity, vectorUnit(diff));//this is -radial velocity
        if (distancePerTimeStep <= 0) {
            // Not coming towards us
            continue;
        }
        var approachCalc = closestApproach(projectile.pos,projectile.velocity,hero.pos);
        //!DEBUG_DODGE || console.log(approachCalc);
        if (approachCalc.dist >= effectiveDodgeDistance|| approachCalc.time >= minDodgeTime) {
            // Will pass too far away or can wait.
            //!DEBUG_DODGE || console.log(\"Ignoring potential threat:\"+projectile.spellId);
            continue;
        }
        if(approachCalc.dist <= (hero.radius + effectiveRadius)*1.1 && approachCalc.time < maxDeflectTime){
          //going to hit us - try to deflect. TODO: be smarter, sometimes it's better to take the hit
          var deflectAction = deflect(state, hero, cooldowns, projectile);
          !(deflectAction||state.tick%5==0)|| !DEBUG_DODGE || console.log(\"Trying to deflect:\"+projectile.spellId);
          if (deflectAction) {
              resultAction = deflectAction;
              timeToAction = 0;
          }
        }
        

        // Run away from collision point
        if(approachCalc.time < timeToAction){
          !(state.tick%5==0)||!DEBUG_DODGE || console.log(\"Trying to dodge:\"+projectile.spellId);
          var direction = vectorUnit(vectorDiff(hero.pos, approachCalc.pos));
          var step = vectorMultiply(direction, minDodgeDistance);
          var target = vectorPlus(hero.pos, step);
          resultAction = { spellId: \"move\", target };
          timeToAction = approachCalc.time;
        }
    }
    return resultAction;
}

function vectorDiff(to, from) {
    return { x: to.x - from.x, y: to.y - from.y };
}

function vectorLength(vector) {
    return Math.sqrt(vector.x * vector.x + vector.y * vector.y);
}

function vectorDistance(from, to) {
    return vectorLength(vectorDiff(from, to));
}

function vectorUnit(vec) {
    var length = vectorLength(vec);
    return length === 0 ? vec : vectorMultiply(vec, 1 / length);
}

function vectorPlus(from, offset) {
    return { x: from.x + offset.x, y: from.y + offset.y };
}

function vectorMultiply(vec, multiplier) {
    return { x: vec.x * multiplier, y: vec.y * multiplier };
}

function vectorRelengthen(vec, length) {
    return vectorMultiply(vectorUnit(vec), length);
}

function vectorNegate(vec) {
    return vectorMultiply(vec, -1);
}

function vectorDot(a, b) {
    return (a.x * b.x) + (a.y * b.y);
}

function vectorMidpoint(a, b) {
    var diff = vectorDiff(b, a);
    return vectorPlus(a, vectorMultiply(diff, 0.5));
}

function vectorFromAngle(angle) {
\treturn { x: Math.cos(angle), y: Math.sin(angle) };
}

function vectorAngle(vec) {
    return Math.atan2(vec.y, vec.x);
}

function vectorAngleDelta(currentAngle, targetAngle) {
\tvar delta = targetAngle - currentAngle;
\twhile (delta > Math.PI) {
\t\tdelta -= 2 * Math.PI;
\t}
\twhile (delta < -Math.PI) {
\t\tdelta += 2 * Math.PI;
\t}
\treturn delta;
}



class baseComplexArray {
  constructor(other, arrayType = Float32Array) {
    if (other instanceof baseComplexArray) {
      // Copy constuctor.
      this.ArrayType = other.ArrayType;
      this.real = new this.ArrayType(other.real);
      this.imag = new this.ArrayType(other.imag);
    } else {
      this.ArrayType = arrayType;
      // other can be either an array or a number.
      this.real = new this.ArrayType(other);
      this.imag = new this.ArrayType(this.real.length);
    }

    this.length = this.real.length;
  }

  toString() {
    const components = [];

    this.forEach((value, i) => {
      components.push(
        `(${value.real.toFixed(2)}, ${value.imag.toFixed(2)})`
      );
    });

    return `[${components.join(', ')}]`;
  }

  forEach(iterator) {
    const n = this.length;
    // For gc efficiency, re-use a single object in the iterator.
    const value = Object.seal(Object.defineProperties({}, {
      real: {writable: true}, imag: {writable: true},
    }));

    for (let i = 0; i < n; i++) {
      value.real = this.real[i];
      value.imag = this.imag[i];
      iterator(value, i, n);
    }
  }

  // In-place mapper.
  map(mapper) {
    this.forEach((value, i, n) => {
      mapper(value, i, n);
      this.real[i] = value.real;
      this.imag[i] = value.imag;
    });

    return this;
  }

  conjugate() {
    return new baseComplexArray(this).map((value) => {
      value.imag *= -1;
    });
  }

  magnitude() {
    const mags = new this.ArrayType(this.length);

    this.forEach((value, i) => {
      mags[i] = Math.sqrt(value.real*value.real + value.imag*value.imag);
    })

    return mags;
  }
}

//fft.js
// Math constants and functions we need.
const PI = Math.PI;
const SQRT1_2 = Math.SQRT1_2;

function FFT(input) {
  return ensureComplexArray(input).FFT();
};

function InvFFT(input) {
  return ensureComplexArray(input).InvFFT();
};

function frequencyMap(input, filterer) {
  return ensureComplexArray(input).frequencyMap(filterer);
};

class ComplexArray extends baseComplexArray {
  FFT() {
    return fft(this, false);
  }

  InvFFT() {
    return fft(this, true);
  }

  // Applies a frequency-space filter to input, and returns the real-space
  // filtered input.
  // filterer accepts freq, i, n and modifies freq.real and freq.imag.
  frequencyMap(filterer) {
    return this.FFT().map(filterer).InvFFT();
  }
}

function ensureComplexArray(input) {
  return input instanceof baseComplexArray && input || new ComplexArray(input);
}

function fft(input, inverse) {
  const n = input.length;

  if (n & (n - 1)) {
    return FFT_Recursive(input, inverse);
  } else {
    return FFT_2_Iterative(input, inverse);
  }
}

function FFT_Recursive(input, inverse) {
  const n = input.length;

  if (n === 1) {
    return input;
  }

  const output = new ComplexArray(n, input.ArrayType);

  // Use the lowest odd factor, so we are able to use FFT_2_Iterative in the
  // recursive transforms optimally.
  const p = LowestOddFactor(n);
  const m = n / p;
  const normalisation = 1 / Math.sqrt(p);
  let recursive_result = new ComplexArray(m, input.ArrayType);

  // Loops go like O(n Σ p_i), where p_i are the prime factors of n.
  // for a power of a prime, p, this reduces to O(n p log_p n)
  for(let j = 0; j < p; j++) {
    for(let i = 0; i < m; i++) {
      recursive_result.real[i] = input.real[i * p + j];
      recursive_result.imag[i] = input.imag[i * p + j];
    }
    // Don't go deeper unless necessary to save allocs.
    if (m > 1) {
      recursive_result = fft(recursive_result, inverse);
    }

    const del_f_r = Math.cos(2*PI*j/n);
    const del_f_i = (inverse ? -1 : 1) * Math.sin(2*PI*j/n);
    let f_r = 1;
    let f_i = 0;

    for(let i = 0; i < n; i++) {
      const _real = recursive_result.real[i % m];
      const _imag = recursive_result.imag[i % m];

      output.real[i] += f_r * _real - f_i * _imag;
      output.imag[i] += f_r * _imag + f_i * _real;

      [f_r, f_i] = [
        f_r * del_f_r - f_i * del_f_i,
        f_i = f_r * del_f_i + f_i * del_f_r,
      ];
    }
  }

  // Copy back to input to match FFT_2_Iterative in-placeness
  // TODO: faster way of making this in-place?
  for(let i = 0; i < n; i++) {
    input.real[i] = normalisation * output.real[i];
    input.imag[i] = normalisation * output.imag[i];
  }

  return input;
}

function FFT_2_Iterative(input, inverse) {
  const n = input.length;

  const output = BitReverseComplexArray(input);
  const output_r = output.real;
  const output_i = output.imag;
  // Loops go like O(n log n):
  //   width ~ log n; i,j ~ n
  let width = 1;
  while (width < n) {
    const del_f_r = Math.cos(PI/width);
    const del_f_i = (inverse ? -1 : 1) * Math.sin(PI/width);
    for (let i = 0; i < n/(2*width); i++) {
      let f_r = 1;
      let f_i = 0;
      for (let j = 0; j < width; j++) {
        const l_index = 2*i*width + j;
        const r_index = l_index + width;

        const left_r = output_r[l_index];
        const left_i = output_i[l_index];
        const right_r = f_r * output_r[r_index] - f_i * output_i[r_index];
        const right_i = f_i * output_r[r_index] + f_r * output_i[r_index];

        output_r[l_index] = SQRT1_2 * (left_r + right_r);
        output_i[l_index] = SQRT1_2 * (left_i + right_i);
        output_r[r_index] = SQRT1_2 * (left_r - right_r);
        output_i[r_index] = SQRT1_2 * (left_i - right_i);

        [f_r, f_i] = [
          f_r * del_f_r - f_i * del_f_i,
          f_r * del_f_i + f_i * del_f_r,
        ];
      }
    }
    width <<= 1;
  }

  return output;
}

function BitReverseIndex(index, n) {
  let bitreversed_index = 0;

  while (n > 1) {
    bitreversed_index <<= 1;
    bitreversed_index += index & 1;
    index >>= 1;
    n >>= 1;
  }
  return bitreversed_index;
}

function BitReverseComplexArray(array) {
  const n = array.length;
  const flips = new Set();

  for(let i = 0; i < n; i++) {
    const r_i = BitReverseIndex(i, n);

    if (flips.has(i)) continue;

    [array.real[i], array.real[r_i]] = [array.real[r_i], array.real[i]];
    [array.imag[i], array.imag[r_i]] = [array.imag[r_i], array.imag[i]];

    flips.add(r_i);
  }

  return array;
}

function LowestOddFactor(n) {
  const sqrt_n = Math.sqrt(n);
  let factor = 3;

  while(factor <= sqrt_n) {
    if (n % factor === 0) return factor;
    factor += 2;
  }
  return n;
}

// See ai.contracts.ts: Must return a BotContract
return { act };"
}