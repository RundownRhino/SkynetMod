{
	"Mod": {
		"name": "Skynet mod",
		"author": "SlitheringHorror",
		"description": "Mon, 20 Apr 2020 15:33:49 GMT",
		"titleLeft": "Skynet ",
		"titleRight": "Mod!",
		"subtitleLeft": "Boosts bots' reaction times to be nigh-instanteneous",
		"subtitleRight": "and makes them lead targets"
	},
	"Matchmaking": {
		"MaxBots": 1
	},
	"World": {
		"BotName": "MurderBot"
	},
	"Code": "var center = { x: 0.5, y: 0.5 };\n\nvar CloseEnoughDistance = 0.05;\nvar CloseEnoughRadians = 0.03 * Math.PI;\nvar MissRadius = 0;\nvar DodgeRadius = 0.15;\nvar SpellCastIntervalMilliseconds = 500;\nvar SpellCastJitterMilliseconds = 300;\n\n\nvar TicksPerSecond = 60;\n\nvar HardReactionMilliseconds = 1;\nvar EasyReactionMilliseconds = 1;\nvar ReactionMillisecondsLookup = { // Change the reaction time on certain spells\n    retarget: 1,\n};\n\nvar alreadyChosenSpells = false;\nvar nextSpell = 0;\n\n// See ai.contracts.ts:\n// input is InputContract - contains information about the current state of the world\n// output is OutputContract - an action you want to take in response to the world \n\n//parameters for the bot\nvar enableTargetLeading = true;\nvar RepeaterCastIntervalMilliseconds = 50;\nvar enableObstacleRaytracing = false;//not implemented\nvar positionTrackingTicks = 20; //how many to track, including the current one. At least 2.\n//memory vars\nvar trackedPositions = {}; //dictionary of arrays(of length up to positionTrackingTicks) of positions\n\nfunction aim(target, spell, caster) {\n  const DEBUG_AIM = false;\n  // Gets target, spell, and caster, outputs the position for caster to aim at to hit the target with the spell.\n  if(!enableTargetLeading){\n    return target.pos;\n  }\n  /*old tracking code\n  const HEROSPEED = 0.12 //not sure I can get it directly\n  \n  var curPos = target.pos; //vector\n  var targetForcedVelocity = target.velocity; //vector - this is only enforced velocity from knockback\n  var targetMoveVelocity = vectorMultiply(vectorFromAngle(target.heading),HEROSPEED);\n  var targetVelocity = vectorPlus(targetForcedVelocity,targetMoveVelocity);\n  var range = vectorDistance(caster.pos, curPos);\n  var time1 = range/spell.projectile.speed; // naive guess at a time-to-hit, in seconds\n  var deltaX = vectorMultiply(targetVelocity,time1); //leading distance\n  */\n  \n  //new code: prediction based on old positions\n  //the current position should already be in trackedPositions\n  var curPos = target.pos;\n  var tracker = trackedPositions[target.id];\n  !DEBUG_AIM || console.log(tracker);\n  if(tracker === undefined){\n    return curPos;//TODO: better handling cases when the target has no tracked poses for some reason.\n  }\n  /*//most naive way: velocity = (<newest pos>-<oldest pos>)/(positionTrackingTicks-1)\n  var estimatedVelocity = vectorMultiply(vectorDiff(tracker[tracker.length-1],tracker[0]),1/(positionTrackingTicks-1));//this is speed per tick*/\n  //less naive way: linear approximation\n  var estimatedVelocity = linearApproximation(tracker);\n  console.log(\"estimatedVelocity:\"+myVectorToString(estimatedVelocity));\n  var range = vectorDistance(caster.pos, curPos);\n  var time1 = range/spell.projectile.speed; // same naive guess as in old code, in seconds\n  var deltaX = vectorMultiply(estimatedVelocity,time1*TicksPerSecond);//converting from per tick to per second\n  var aimPos = vectorPlus(curPos, deltaX);\n  !DEBUG_AIM || console.log(\"spellSpeed:\"+spell.projectile.speed+\";estimatedVelocity:\"+myVectorToString(estimatedVelocity));\n  return aimPos;\n}\nfunction linearApproximation(posArray){\n  //gets an array of vectors, assumed to be all with a separation of 1 tick, outputs incline of least-squares approximation\n  let valNum = posArray.length;\n  let X = [];\n  let Y = [];\n  for(let i=0;i<valNum;i++){\n    X.push(posArray[i].x);\n    Y.push(posArray[i].y);\n  }\n  let T = myRange(0,valNum);\n  let aX = ODLR(T,X).a;\n  let aY = ODLR(T,Y).a;\n  return {x:aX,y:aY};//b we don't care about\n}\nfunction ODLR(X,Y){\n  //one-dimensional linear regression\n  //outputs parameters of approximation `ax+b` of points in the input\n  //X,Y - arrays of numbers, same length\n  let n = X.length;\n  let XSum = myArraySum(X);\n  let YSum = myArraySum(Y);\n  let XYSum = myArraySum(myArrayMultiply(X,Y));\n  let XXSum = myArraySum(myArrayMultiply(X,X));\n  let YYSum = myArraySum(myArrayMultiply(Y,Y));\n  let a = (n*XYSum-XSum*YSum)/(n*XXSum-XSum*XSum);\n  let b = (XSum*XYSum-XXSum*YSum)/(XSum*XSum-n*XXSum);\n  return {a:a,b:b};//I sure hope I didn't make a mistake here, lol\n}\nfunction myRange(a,b){\n  //like in python - array from a inclusive to b exclusive\n  let res = [];\n  for(let i = a; i < b; i++){\n    res.push(i);\n  }\n  return res;\n}\nfunction myArrayMultiply(a,b){\n  //array elementwise multiplication\n  //can work on 2-vec\n  if(a.length!=b.length||typeof a != typeof b){\n    console.log(\"Trying to multiply arrays of different sizes/types\");\n    return undefined;//TODO: error out in a better way.\n  }\n  let res = [];\n  if(a.length>0 && a[0].x!==undefined){\n  //assume vector arrays\n  for(let i = 0; i<a.length;i++){\n      res.push({x:a[i].x*b[i].x,y:a[i].y*b[i].y});\n    }\n  }\n  else{\n    for(let i = 0; i<a.length;i++){\n      res.push(a[i]*b[i]);\n    }\n  }\n  return res;\n}\nfunction myArraySum(a){\n  if(a.length==0){return 0;}\n  //sums arrays, including vector ones\n  if(a[0].x!==undefined){\n    //assuming vector array\n    let sumX=0;\n    let sumY=0;\n    for(let i=0;i<a.length;i++){\n      sumX+=a[i].x;\n      sumY+=a[i].y;\n    }\n    return {x:sumX,y:sumY};\n  }\n  else{\n    let sum=0\n    for(let i=0;i<a.length;i++){\n      sum+=a[i];\n    }\n    return sum;\n  }\n}\nfunction myVectorToString(vector){\n  return \"(x:\"+vector.x+\";y:\"+vector.y+\")\"\n}\nfunction doesLineIntersectObstacles(pos1, pos2, obstacles, lookup){\n  //lookup is ObstacleTemplateLookup\n  for (obstacle in obstacles) {\n    var C = obstacle.pos;\n    var closest = findClosestDistanceToPoint(pos, pos2, C);\n    var obstacleTemplate = lookup[obstacle.type];\n    //if(closest<) \n    //oh, I can't get an obstacle's radius...\n    return false;\n  }\n}\n\nfunction findClosestDistanceToPoint(pos1, pos2, otherPos){\n  //return closest distance to otherPos among points on the line segment from pos1 to pos2.\n  var AB = vectorDiff(pos2, pos1);\n  var AC = vectorDiff(otherPos, pos1);\n  var BC = vectorDiff(otherPos, pos2);\n  var AB_BC = vectorDot(AB,BC);\n  var AB_AC = vectorDot(AB,AC);\n  var result = 0;\n  if (AB_BC > 0){\n    //then it's BC\n    result = vectorLength(BC);\n  }\n  else if (AB_AC < 0) { \n    //then it's AC\n    result = vectorLength(AC);\n  }\n  else {\n    var div = vectorLength(AB);\n    result = ((AB.x*AC.y) - (AB.y*AC.x))/div;\n    if(result < 0){\n      result *= -1;\n    }\n  }\n  return result;\n}\nfunction updateTracking(worldstate){\n  const DEBUG_TRACKING = false;\n  !DEBUG_TRACKING || console.log(\"Updating tracking!\");\n  //called from act() every tick, updates tracking\n  for (herokey in worldstate.heroes){//iterates over keys\n    var hero = worldstate.heroes[herokey];\n    !DEBUG_TRACKING || console.log(\"Tracking hero of id:\"+hero.id);\n    if(trackedPositions[hero.id]===undefined){\n      //haven't been tracked before\n      trackedPositions[hero.id]=[];\n    }\n    trackedPositions[hero.id].push(hero.pos); //add new position to the end\n    while(trackedPositions[hero.id].length > positionTrackingTicks){\n      trackedPositions[hero.id].shift(); //remove first element(oldest pos)\n    }\n  }\n}\nfunction act(input) {\n    // Want the bot to do nothing? Uncomment the line below (remove the //):\n    // return null;\n\n    var state = input.state;\n    var heroId = input.heroId;\n    var hero = state.heroes[heroId];\n    var cooldowns = input.cooldowns;\n    var settings = input.settings;\n    var difficulty = input.difficulty;\n    \n    var opponent = findOpponent(state.heroes, heroId);\n    if (!(hero && opponent)) {\n        // Either we're dead, or everyone else is, nothing to do\n        return null;\n    }\n    updateTracking(state);\n    var action = null;\n    if (state.started) {\n        action =\n            recovery(state, hero, cooldowns)\n            || dodge(state, hero, cooldowns)\n            || castSpell(state, hero, opponent, cooldowns, settings)\n            || focus(hero, opponent)\n            || chase(state, hero, cooldowns, opponent)\n            || move(state, hero)\n            || face(state, hero, opponent)\n    } else {\n        action =\n            chooseSpells(settings)\n            || dodge(state, hero, cooldowns)\n            || move(state, hero)\n            || face(state, hero, opponent)\n    }\n\n    if (action) {\n        // Give the bot a reaction time otherwise it is OP\n        var reactionMilliseconds = ReactionMillisecondsLookup[action.spellId] || defaultReactionMilliseconds(difficulty);\n        action.delayMilliseconds = reactionMilliseconds;\n        return action;\n    } else {\n        return null;\n    }\n}\n\nfunction defaultReactionMilliseconds(difficulty) {\n    var alpha = Math.sqrt(difficulty);\n    return alpha * HardReactionMilliseconds + (1 - alpha) * EasyReactionMilliseconds;\n}\n\nfunction chooseSpells(settings) {\n    if (alreadyChosenSpells) {\n        return null;\n    }\n    alreadyChosenSpells = true;\n\n    var spells = randomSpells(settings);\n\n    // Want to test a particular spell? Uncomment and edit the lines below\n    /*spells[\"q\"] = \"fireball\";\n    spells[\"w\"] = \"lightning\";\n    spells[\"e\"] = \"forcefield\";\n    spells[\"r\"] = \"repeater\";*/\n    spells[\"q\"] = \"fireball\";\n    spells[\"w\"] = \"boost\";\n    spells[\"e\"] = \"phaseOut\";\n    spells[\"r\"] = \"repeater\";\n\n    return { spells };\n}\n\nfunction randomSpells(settings) {\n\tvar keyBindings = {};\n\tvar allOptions = settings.Choices.Options;\n\tfor (var btn in allOptions) { // One of the buttons, e.g. Q or R\n        var options = allOptions[btn];\n\n        var spellIds = [];\n        for (var i = 0; i < options.length; ++i) {\n            var row = options[i];\n            for (var j = 0; j < row.length; ++j) {\n                var spellId = row[j];\n                spellIds.push(spellId);\n            }\n        }\n\n\t\tif (spellIds.length > 1) {\n\t\t\tkeyBindings[btn] = spellIds[Math.floor(Math.random() * spellIds.length)];\n\t\t}\n\t}\n\treturn keyBindings;\n}\n\nfunction findOpponent(heroes, myHeroId) {\n    var myHero = heroes[myHeroId];\n    if (!myHero) {\n        return null;\n    }\n\n    var choice = null;\n    var mostHealth = 0;\n    for (var heroId in heroes) {\n        var hero = heroes[heroId];\n\n        if (!hero.isEnemy) { continue; }\n\n        // Uncomment the line below to only target humans\n        // if (hero.isBot) { continue; }\n\n        if (hero.health > mostHealth) {\n            // Target the enemy with the most health\n            mostHealth = hero.health;\n            choice = hero;\n        }\n    }\n    return choice;\n}\n\nfunction recovery(state, hero, cooldowns) {\n    if (hero.inside || state.radius <= 0) {\n        // No need to recover\n        return null;\n    }\n\n    var spellId = null;\n    if (cooldowns[\"teleport\"] === 0) {\n        spellId = \"teleport\";\n    } else if (cooldowns[\"thrust\"] === 0) {\n        spellId = \"thrust\";\n    } else if (cooldowns[\"swap\"] === 0) {\n        spellId = \"swap\";\n    } else if (cooldowns[\"voidRush\"] === 0) {\n        spellId = \"voidRush\";\n    } else if (cooldowns[\"vanish\"] === 0) {\n        spellId = \"vanish\";\n    } else {\n        spellId = \"move\";\n    }\n\n    if (spellId) {\n        return { spellId, target: center };\n    }\n    return null;\n}\n\nfunction deflect(state, hero, cooldowns, projectile) {\n    var target = vectorMidpoint(hero.pos, projectile.pos);\n    var spellId = null;\n    if (cooldowns[\"shield\"] === 0) {\n        spellId = \"shield\";\n    } else if (cooldowns[\"icewall\"] === 0) {\n        spellId = \"icewall\";\n    } else if (cooldowns[\"saber\"] === 0) {\n        spellId = \"saber\";\n    } else if (cooldowns[\"dualSaber\"] === 0) {\n        spellId = \"dualSaber\";\n    } else if (cooldowns[\"meteor\"] === 0) {\n        spellId = \"meteor\";\n    } else if (cooldowns[\"meteorite\"] === 0) {\n        spellId = \"meteorite\";\n    } else if (cooldowns[\"whirlwind\"] === 0) {\n        spellId = \"whirlwind\";\n    } else if (cooldowns[\"phaseOut\"] === 0) {\n        spellId = \"phaseOut\";\n    } else {\n        spellId = null;\n    }\n\n    if (spellId) {\n        return { spellId, target };\n    } else {\n        return null;\n    }\n}\n\nfunction castSpell(state, hero, opponent, cooldowns, settings) {\n    if (!readyForNextSpell(hero)) {\n        return null;\n    }\n\n    var candidates = [];\n    for (var spellId in cooldowns) {\n        var readyToCast = !cooldowns[spellId];\n        var spell = settings.Spells[spellId];\n\n        if (spell\n            && readyToCast\n            && validAttack(state, hero, opponent, spell)) {\n\n            candidates.push(spellId);\n        }\n    }\n\n    if (candidates.length > 0) {\n        var spellId = candidates[Math.floor(Math.random() * candidates.length)];\n        var action = { spellId, target: aim(opponent, settings.Spells[spellId], hero) };\n        if (action.spellId === spellId) {\n            updateNextSpellTime(spellId);\n        }\n        return action;\n    } else {\n        return null;\n    }\n}\n\nfunction validAttack(state, hero, opponent, spell) {\n    var opponentShielded = !!opponent.shieldTicksRemaining;\n\n    var distance = vectorDistance(hero.pos, opponent.pos);\n    if (spell.action === \"projectile\" || spell.action === \"spray\" || spell.action === \"retractor\" || spell.action === \"focus\" || spell.action === \"charge\") {\n        if (spell.id === \"swap\") { // Swap doesn't work as an attack\n            return false;\n        }\n        if (opponentShielded && !spell.projectile.detonate) { // Detonate spells can penetrate shields, nothing else can\n            return false;\n        }\n        if (spell.id === \"whip\") {\n            // Just keep casting Electroshock even if out of range\n            return true;\n        }\n\n        var range = spell.projectile.speed * spell.projectile.maxTicks / TicksPerSecond + opponent.radius;\n        return distance <= range;\n    } else if (spell.action === \"scourge\") {\n        var range = spell.radius + opponent.radius;\n        return distance <= range;\n    } else if (spell.id === \"blaze\") {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction readyForNextSpell(hero) {\n    return (\n        Date.now() >= nextSpell // Don't cast too fast\n        || !!hero.link // If linked to something, cast as many spells as possible\n    );\n}\n\nfunction updateNextSpellTime(spellId) {\n    if(spellId == \"repeater\"){\n      //console.log(\"repeater usage detected\")\n      nextSpell = Date.now() + RepeaterCastIntervalMilliseconds;\n      return;\n    }\n    nextSpell = Date.now() + SpellCastIntervalMilliseconds + Math.floor((Math.random() < 0.5 ? -1 : 1) * Math.random() * SpellCastJitterMilliseconds);\n}\n\nfunction jitter(target, missRadius) {\n    var radius = Math.random() * missRadius;\n    var angle = Math.random() * 2 * Math.PI;\n    return {\n        x: target.x + radius * Math.cos(angle),\n        y: target.y + radius * Math.sin(angle),\n    };\n}\n\nfunction focus(hero, opponent) { // When using a spell (e.g. Acolyte Beam, Spirit Missile) - ensure we are focusing the enemy, otherwise we will miss\n    if (hero.casting) {\n        if (hero.casting.spellId === \"blast\" || hero.casting.spellId === \"retractor\" || hero.casting.spellId === \"rocket\") {\n            // Have to release or it won't fire\n            return { spellId: hero.casting.spellId, release: true, target: opponent.pos };\n        } else if (hero.casting.spellId === \"saber\" || hero.casting.spellId === \"dualSaber\") {\n            // Don't focus the lightsaber, just swish it around\n            return { spellId: \"retarget\", target: vectorPlus(hero.pos, vectorFromAngle(hero.heading + Math.PI / 2)) };\n        } else if (hero.casting.spellId === \"grapple\") {\n            // Throw away to the right (TODO: be smarter about this)\n            return { spellId: hero.casting.spellId, release: true, target: vectorPlus(hero.pos, vectorFromAngle(hero.heading + Math.PI / 2)) };\n        } else if (hero.casting.spellId === \"halo\") {\n            return { spellId: \"move\", target: opponent.pos };\n        } else {\n            return { spellId: \"retarget\", target: opponent.pos };\n        }\n    } else {\n        return null;\n    }\n}\n\nfunction chase(state, hero, cooldowns, opponent) {\n    if (\"whip\" in cooldowns) {\n        // Got to get within range when using Electroshock\n        var target = vectorMidpoint(hero.pos, opponent.pos);\n        return { spellId: \"move\", target };\n    } else {\n        return null;\n    }\n}\n\nfunction move(state, hero) {\n    var centroid = { x: 0, y: 0 };\n    var numOpponents = 0;\n    for (var heroId in state.heroes) {\n        if (heroId === hero.id) {\n            continue; // Ignore self\n        }\n\n        var opponent = state.heroes[heroId];\n        centroid.x += opponent.pos.x;\n        centroid.y += opponent.pos.y;\n\n        ++numOpponents;\n    }\n    centroid.x /= numOpponents;\n    centroid.y /= numOpponents;\n\n    if (!numOpponents) {\n        return;\n    }\n\n    var offset = vectorNegate(vectorDiff(centroid, center)); // Move to the opposite side of the arena\n    var targetDistance = state.radius * 0.33; // Closer to center than edge (for polygonal maps)\n    var target = vectorPlus(center, vectorRelengthen(offset, targetDistance));\n\n    var distanceToTarget = vectorDistance(hero.pos, target);\n    if (distanceToTarget <= CloseEnoughDistance) {\n        // Close enough - don't send any action so the game can sleep while waiting for players\n        return null;\n    }\n\n    return { spellId: \"move\", target };\n}\n\nfunction face(state, hero, opponent) {\n    var target = opponent.pos;\n    var targetAngle = vectorAngle(vectorDiff(opponent.pos, hero.pos));\n    var angleDelta = vectorAngleDelta(hero.heading, targetAngle);\n    if (Math.abs(angleDelta) <= CloseEnoughRadians) {\n        return null;\n    }\n\n    return { spellId: \"retarget\", target };\n}\n\nfunction dodge(state, hero, cooldowns) {\n    for (var projectileId in state.projectiles) {\n        var projectile = state.projectiles[projectileId];\n        if (projectile.ownerId === hero.id) {\n            // This is my own projectile\n            continue;\n        }\n\n        if (projectile.spellId === \"halo\") {\n            // Halo is never coming for us, it orbits around its owner\n            continue;\n        }\n\n        var diff = vectorDiff(hero.pos, projectile.pos);\n        var distancePerTimeStep = vectorDot(projectile.velocity, vectorUnit(diff));\n        if (distancePerTimeStep <= 0) {\n            // Not coming towards us\n            continue;\n        }\n\n        var timeToCollision = vectorLength(diff) / distancePerTimeStep;\n        if (timeToCollision <= 0 || timeToCollision >= 30) {\n            // Not coming towards us or too far away\n            continue;\n        }\n\n        var collisionPoint = vectorPlus(projectile.pos, vectorMultiply(projectile.velocity, timeToCollision));\n        var distanceToCollision = vectorDistance(collisionPoint, hero.pos);\n        var dodgeRadius = Math.max(DodgeRadius, projectile.radius) + hero.radius;\n        if (distanceToCollision > dodgeRadius) {\n            // Won't hit us\n            continue;\n        }\n\n        var deflectAction = deflect(state, hero, cooldowns, projectile);\n        if (deflectAction) {\n            return deflectAction;\n        }\n\n        // Run away from collision point\n        var direction = vectorUnit(vectorNegate(vectorDiff(collisionPoint, hero.pos)));\n        var step = vectorMultiply(direction, dodgeRadius);\n        var target = vectorPlus(hero.pos, step);\n        return { spellId: \"move\", target };\n    }\n    return null;\n}\n\nfunction vectorDiff(to, from) {\n    return { x: to.x - from.x, y: to.y - from.y };\n}\n\nfunction vectorLength(vector) {\n    return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n}\n\nfunction vectorDistance(from, to) {\n    return vectorLength(vectorDiff(from, to));\n}\n\nfunction vectorUnit(vec) {\n    var length = vectorLength(vec);\n    return length === 0 ? vec : vectorMultiply(vec, 1 / length);\n}\n\nfunction vectorPlus(from, offset) {\n    return { x: from.x + offset.x, y: from.y + offset.y };\n}\n\nfunction vectorMultiply(vec, multiplier) {\n    return { x: vec.x * multiplier, y: vec.y * multiplier };\n}\n\nfunction vectorRelengthen(vec, length) {\n    return vectorMultiply(vectorUnit(vec), length);\n}\n\nfunction vectorNegate(vec) {\n    return vectorMultiply(vec, -1);\n}\n\nfunction vectorDot(a, b) {\n    return (a.x * b.x) + (a.y * b.y);\n}\n\nfunction vectorMidpoint(a, b) {\n    var diff = vectorDiff(b, a);\n    return vectorPlus(a, vectorMultiply(diff, 0.5));\n}\n\nfunction vectorFromAngle(angle) {\n\treturn { x: Math.cos(angle), y: Math.sin(angle) };\n}\n\nfunction vectorAngle(vec) {\n    return Math.atan2(vec.y, vec.x);\n}\n\nfunction vectorAngleDelta(currentAngle, targetAngle) {\n\tvar delta = targetAngle - currentAngle;\n\twhile (delta > Math.PI) {\n\t\tdelta -= 2 * Math.PI;\n\t}\n\twhile (delta < -Math.PI) {\n\t\tdelta += 2 * Math.PI;\n\t}\n\treturn delta;\n}\n\n// See ai.contracts.ts: Must return a BotContract\nreturn { act };"
}